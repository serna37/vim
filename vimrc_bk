



" {{{

" color
" {{{
let s:colorscheme_arr_default = ['torte']
let s:colorscheme_arr = ['onedark']
" hybrid_material
" molokai
fu! ChangeColor()
  if glob('~/.vim/colors') != ''
    execute('colorscheme ' . s:colorscheme_arr[localtime() % len(s:colorscheme_arr)])
  else
    execute('colorscheme ' . s:colorscheme_arr_default[localtime() % len(s:colorscheme_arr_default)])
  endif
endf
cal ChangeColor()

" }}}
" plugins
" {{{
" color
let s:colors = [
    \ 'hybrid_material.vim',
    \ 'molokai.vim',
    \ 'onedark.vim'
\ ]

" repo
let s:repos = [
    \ 'junegunn/fzf',
    \ 'junegunn/fzf.vim',
    \ 'neoclide/coc.nvim',
    \ 'unblevable/quick-scope',
    \ 'easymotion/vim-easymotion',
    \ 'obcat/vim-hitspop',
    \ 't9md/vim-quickhl',
    \ 'MattesGroeger/vim-bookmarks',
    \ 'jiangmiao/auto-pairs',
    \ 'markonm/traces.vim',
    \ 'tpope/vim-fugitive',
    \ 'airblade/vim-gitgutter',
    \ 'mhinz/vim-startify',
    \ 'vim-airline/vim-airline',
    \ 'vim-airline/vim-airline-themes',
    \ 'sheerun/vim-polyglot',
    \ 'uiiaoo/java-syntax.vim',
    \ 'thinca/vim-quickrun',
    \ 'puremourning/vimspector',
    \ 'github/copilot.vim',
    \ 'junegunn/goyo.vim',
    \ 'junegunn/limelight.vim',
\ ]

" extentions
let s:coc_extentions = [
    \ 'coc-explorer',
    \ 'coc-lists',
    \ 'coc-fzf-preview',
    \ 'coc-snippets',
    \ 'coc-sh',
    \ 'coc-vimlsp',
    \ 'coc-json',
    \ 'coc-sql',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-tsserver',
    \ 'coc-clangd',
    \ 'coc-go',
    \ 'coc-pyright',
    \ 'coc-java',
\ ]

fu! PlugInstall(...)
  " color
  let repo = 'https://raw.githubusercontent.com/serna37/vim-color/master/'
  let cmd = "mkdir -p ~/.vim/colors && cd ~/.vim/colors "
  for scheme in s:colors
    let cmd = cmd . ' && curl ' . repo . scheme . ' > ' . scheme
  endfor
  " plugins
  let cmd = cmd . " && repos=('".join(s:repos,"' '")."') && mkdir -p ~/.vim/pack/plugins/start && cd ~/.vim/pack/plugins/start"
    \ . " && for v in ${repos[@]};do git clone --depth 1 https://github.com/${v} ;done"
    \ . " && fzf/install --no-key-bindings --completion --no-bash --no-zsh --no-fish"
  cal job_start(["/bin/zsh","-c",cmd], {'close_cb': function('s:coc_setup')})
  echo 'plug install processing...'
endf
fu! s:coc_setup(ch) abort
  echo 'coc install. please reboot vim, and call "PlugInstallCoc"'
  cal coc#util#install()
endf

" coc extentions
fu! PlugInstallCoc()
  execute("CocInstall " . join(s:coc_extentions," "))
endf

" uninstall
fu! PlugUnInstall(...)
  echo 'delete ~/.vim ~/.config'
  echo 'are you sure to delete these folder ?'
  let w = inputdialog("YES (Y) / NO (N)")
  if w != 'Y' || w != 'y'
    echo 'cancel'
    retu
  endif
  execute("bo terminal ++shell echo 'start' && rm -rf ~/.vim ~/.config && echo 'end'")
endf
" }}}

" }}}

" ========================================
" COMMAND
" ========================================
command! PlugInstall cal PlugInstall()
command! PlugInstallCoc cal PlugInstallCoc()
command! PlugUnInstall cal PlugUnInstall()


